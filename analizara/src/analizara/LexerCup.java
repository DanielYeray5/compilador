/* The following code was generated by JFlex 1.4.3 on 08/01/25 14:08 */

package analizara;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/01/25 14:08 from the specification file
 * <tt>/Users/david/Desktop/Universidad/SEMESTRE_5/LYA/compilador/analizara/src/analizara/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 28,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 48, 49,  0,  0, 36,  0, 47, 30, 29, 34, 32, 44, 33, 45, 27, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 46, 37, 38, 31, 39,  0, 
     0,  1,  1, 18,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1, 22,  1,  1,  1,  1,  1,  1,  1, 42,  0, 43, 35,  1, 
     0, 13,  6,  9, 14, 16, 20, 17, 23,  8,  1,  1,  7, 24, 19, 10, 
     4,  1, 11, 21, 15,  5, 12,  1, 25, 26,  1, 40,  0, 41,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\4\2\1\5\13\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\1\1\33\26\2"+
    "\1\34\3\2\1\4\1\0\1\35\1\36\1\37\1\40"+
    "\36\2\1\0\13\2\1\41\13\2\1\42\4\2\1\43"+
    "\3\2\1\3\11\2\1\44\3\2\1\45\1\2\1\46"+
    "\1\2\1\47\5\2\1\50\1\2\1\51\1\52\1\53"+
    "\1\54\14\2\1\55\3\2\1\56\2\2\1\57\2\2"+
    "\1\60\1\61\11\2\1\62\7\2\1\63\1\2\1\64"+
    "\1\2\1\65\1\66\1\67\1\70\2\2\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\2\1\77\1\2\1\100"+
    "\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\144\0\u03e8\0\62"+
    "\0\u041a\0\u044c\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\u047e\0\u04b0\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\62\0\u04e2\0\62\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\144\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\62\0\62\0\62\0\62\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\144\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\144\0\u14b4\0\u14e6\0\u1518\0\u154a\0\144"+
    "\0\u157c\0\u15ae\0\u15e0\0\62\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\144\0\u17d4\0\u1806"+
    "\0\u1838\0\144\0\u186a\0\144\0\u189c\0\144\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\144\0\u19c8\0\144\0\144\0\144"+
    "\0\144\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\144\0\u1c52\0\u1c84"+
    "\0\u1cb6\0\144\0\u1ce8\0\u1d1a\0\144\0\u1d4c\0\u1d7e\0\144"+
    "\0\144\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\144\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a"+
    "\0\u206c\0\u209e\0\144\0\u20d0\0\144\0\u2102\0\144\0\144"+
    "\0\144\0\144\0\u2134\0\u2166\0\144\0\144\0\144\0\144"+
    "\0\144\0\144\0\u2198\0\144\0\u21ca\0\144\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\3\1\15\1\3"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\3\1\26\1\27\1\5\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\63\0\2\3\1\0\27\3\31\0\1\4"+
    "\60\0\2\3\1\0\1\3\1\55\5\3\1\56\17\3"+
    "\30\0\2\3\1\0\6\3\1\57\20\3\30\0\2\3"+
    "\1\0\17\3\1\60\4\3\1\61\2\3\30\0\2\3"+
    "\1\0\3\3\1\62\5\3\1\63\15\3\30\0\2\3"+
    "\1\0\1\64\26\3\30\0\2\3\1\0\6\3\1\65"+
    "\5\3\1\66\12\3\30\0\2\3\1\0\11\3\1\67"+
    "\2\3\1\70\12\3\30\0\2\3\1\0\6\3\1\71"+
    "\5\3\1\72\12\3\30\0\2\3\1\0\17\3\1\73"+
    "\1\3\1\74\3\3\1\75\1\3\30\0\2\3\1\0"+
    "\11\3\1\76\15\3\30\0\2\3\1\0\1\3\1\77"+
    "\25\3\30\0\2\3\1\0\3\3\1\100\1\101\4\3"+
    "\1\102\15\3\30\0\2\3\1\0\4\3\1\103\22\3"+
    "\30\0\2\3\1\0\4\3\1\104\22\3\30\0\2\3"+
    "\1\0\11\3\1\105\15\3\30\0\2\3\1\0\4\3"+
    "\1\106\22\3\62\0\1\107\67\0\1\110\57\0\1\111"+
    "\61\0\1\112\61\0\1\113\61\0\1\114\23\0\2\3"+
    "\1\0\2\3\1\115\24\3\30\0\2\3\1\0\4\3"+
    "\1\116\1\3\1\117\20\3\30\0\2\3\1\0\6\3"+
    "\1\120\20\3\30\0\2\3\1\0\13\3\1\121\13\3"+
    "\30\0\2\3\1\0\1\122\26\3\30\0\2\3\1\0"+
    "\11\3\1\123\15\3\30\0\2\3\1\0\1\124\6\3"+
    "\1\125\11\3\1\126\5\3\30\0\2\3\1\0\5\3"+
    "\1\127\21\3\30\0\2\3\1\0\24\3\1\130\2\3"+
    "\30\0\2\3\1\0\13\3\1\131\13\3\30\0\2\3"+
    "\1\0\5\3\1\132\21\3\30\0\2\3\1\0\7\3"+
    "\1\133\17\3\30\0\2\3\1\0\2\3\1\134\24\3"+
    "\30\0\2\3\1\0\6\3\1\135\20\3\30\0\2\3"+
    "\1\0\13\3\1\136\13\3\30\0\2\3\1\0\13\3"+
    "\1\137\13\3\30\0\2\3\1\0\13\3\1\140\13\3"+
    "\30\0\2\3\1\0\12\3\1\141\14\3\30\0\2\3"+
    "\1\0\3\3\1\142\10\3\1\143\12\3\30\0\2\3"+
    "\1\0\6\3\1\144\20\3\30\0\2\3\1\0\17\3"+
    "\1\145\7\3\30\0\2\3\1\0\3\3\1\146\23\3"+
    "\30\0\2\3\1\0\17\3\1\147\7\3\30\0\2\3"+
    "\1\0\5\3\1\150\13\3\1\151\5\3\30\0\2\3"+
    "\1\0\14\3\1\152\12\3\27\0\34\107\1\0\25\107"+
    "\2\0\1\153\60\0\2\3\1\0\3\3\1\154\23\3"+
    "\30\0\2\3\1\0\10\3\1\155\16\3\30\0\2\3"+
    "\1\0\13\3\1\156\13\3\30\0\2\3\1\0\3\3"+
    "\1\157\23\3\30\0\2\3\1\0\14\3\1\160\12\3"+
    "\30\0\2\3\1\0\3\3\1\161\2\3\1\162\1\163"+
    "\17\3\30\0\2\3\1\0\21\3\1\164\5\3\30\0"+
    "\2\3\1\0\13\3\1\165\13\3\30\0\2\3\1\0"+
    "\11\3\1\166\15\3\30\0\2\3\1\0\6\3\1\167"+
    "\20\3\30\0\2\3\1\0\4\3\1\170\22\3\30\0"+
    "\2\3\1\0\1\171\26\3\30\0\2\3\1\0\6\3"+
    "\1\172\20\3\30\0\2\3\1\0\4\3\1\173\22\3"+
    "\30\0\2\3\1\0\12\3\1\174\14\3\30\0\2\3"+
    "\1\0\3\3\1\175\23\3\30\0\2\3\1\0\13\3"+
    "\1\176\13\3\30\0\2\3\1\0\14\3\1\177\12\3"+
    "\30\0\2\3\1\0\11\3\1\200\15\3\30\0\2\3"+
    "\1\0\4\3\1\201\22\3\30\0\2\3\1\0\14\3"+
    "\1\202\12\3\30\0\2\3\1\0\6\3\1\203\20\3"+
    "\30\0\2\3\1\0\10\3\1\204\16\3\30\0\2\3"+
    "\1\0\13\3\1\205\13\3\30\0\2\3\1\0\11\3"+
    "\1\206\15\3\30\0\2\3\1\0\21\3\1\207\5\3"+
    "\30\0\2\3\1\0\6\3\1\210\20\3\30\0\2\3"+
    "\1\0\14\3\1\211\12\3\30\0\2\3\1\0\13\3"+
    "\1\212\13\3\30\0\2\3\1\0\17\3\1\213\7\3"+
    "\31\0\1\153\32\0\1\214\25\0\2\3\1\0\4\3"+
    "\1\215\22\3\30\0\2\3\1\0\11\3\1\216\15\3"+
    "\30\0\2\3\1\0\14\3\1\217\12\3\30\0\2\3"+
    "\1\0\14\3\1\220\12\3\30\0\2\3\1\0\7\3"+
    "\1\221\7\3\1\222\7\3\30\0\2\3\1\0\14\3"+
    "\1\223\12\3\30\0\2\3\1\0\7\3\1\224\17\3"+
    "\30\0\2\3\1\0\4\3\1\225\22\3\30\0\2\3"+
    "\1\0\14\3\1\226\12\3\30\0\2\3\1\0\1\3"+
    "\1\227\25\3\30\0\2\3\1\0\5\3\1\230\21\3"+
    "\30\0\2\3\1\0\6\3\1\231\20\3\30\0\2\3"+
    "\1\0\14\3\1\232\12\3\30\0\2\3\1\0\7\3"+
    "\1\233\17\3\30\0\2\3\1\0\6\3\1\234\20\3"+
    "\30\0\2\3\1\0\11\3\1\235\15\3\30\0\2\3"+
    "\1\0\14\3\1\236\12\3\30\0\2\3\1\0\7\3"+
    "\1\237\17\3\30\0\2\3\1\0\7\3\1\240\17\3"+
    "\30\0\2\3\1\0\13\3\1\241\13\3\30\0\2\3"+
    "\1\0\14\3\1\242\12\3\30\0\2\3\1\0\17\3"+
    "\1\243\7\3\30\0\2\3\1\0\6\3\1\244\20\3"+
    "\30\0\2\3\1\0\11\3\1\245\15\3\30\0\2\3"+
    "\1\0\3\3\1\246\23\3\30\0\2\3\1\0\6\3"+
    "\1\247\20\3\30\0\2\3\1\0\7\3\1\250\17\3"+
    "\30\0\2\3\1\0\11\3\1\251\15\3\30\0\2\3"+
    "\1\0\13\3\1\252\13\3\30\0\2\3\1\0\5\3"+
    "\1\253\21\3\30\0\2\3\1\0\12\3\1\254\14\3"+
    "\30\0\2\3\1\0\15\3\1\255\11\3\30\0\2\3"+
    "\1\0\11\3\1\256\15\3\30\0\2\3\1\0\20\3"+
    "\1\257\6\3\30\0\2\3\1\0\13\3\1\260\13\3"+
    "\30\0\2\3\1\0\24\3\1\261\2\3\30\0\2\3"+
    "\1\0\13\3\1\262\13\3\30\0\2\3\1\0\24\3"+
    "\1\263\2\3\30\0\2\3\1\0\7\3\1\264\17\3"+
    "\30\0\2\3\1\0\13\3\1\265\13\3\30\0\2\3"+
    "\1\0\17\3\1\266\7\3\30\0\2\3\1\0\17\3"+
    "\1\267\7\3\30\0\2\3\1\0\12\3\1\270\14\3"+
    "\30\0\2\3\1\0\6\3\1\271\20\3\30\0\2\3"+
    "\1\0\6\3\1\272\20\3\30\0\2\3\1\0\4\3"+
    "\1\273\22\3\30\0\2\3\1\0\17\3\1\274\7\3"+
    "\30\0\2\3\1\0\11\3\1\275\15\3\30\0\2\3"+
    "\1\0\17\3\1\276\7\3\30\0\2\3\1\0\7\3"+
    "\1\277\17\3\30\0\2\3\1\0\6\3\1\300\20\3"+
    "\30\0\2\3\1\0\6\3\1\301\20\3\30\0\2\3"+
    "\1\0\4\3\1\302\22\3\30\0\2\3\1\0\17\3"+
    "\1\303\7\3\30\0\2\3\1\0\11\3\1\304\15\3"+
    "\30\0\2\3\1\0\11\3\1\305\15\3\30\0\2\3"+
    "\1\0\14\3\1\306\12\3\30\0\2\3\1\0\11\3"+
    "\1\307\15\3\30\0\2\3\1\0\4\3\1\310\22\3"+
    "\30\0\2\3\1\0\11\3\1\311\15\3\30\0\2\3"+
    "\1\0\14\3\1\312\12\3\30\0\2\3\1\0\6\3"+
    "\1\313\20\3\30\0\2\3\1\0\14\3\1\314\12\3"+
    "\30\0\2\3\1\0\24\3\1\315\2\3\30\0\2\3"+
    "\1\0\5\3\1\316\21\3\30\0\2\3\1\0\12\3"+
    "\1\317\14\3\30\0\2\3\1\0\13\3\1\320\13\3"+
    "\30\0\2\3\1\0\11\3\1\321\15\3\30\0\2\3"+
    "\1\0\12\3\1\322\14\3\30\0\2\3\1\0\6\3"+
    "\1\323\20\3\30\0\2\3\1\0\5\3\1\324\21\3"+
    "\30\0\2\3\1\0\7\3\1\325\17\3\30\0\2\3"+
    "\1\0\17\3\1\326\7\3\30\0\2\3\1\0\7\3"+
    "\1\327\17\3\30\0\2\3\1\0\7\3\1\330\17\3"+
    "\30\0\2\3\1\0\7\3\1\331\17\3\30\0\2\3"+
    "\1\0\7\3\1\332\17\3\30\0\2\3\1\0\7\3"+
    "\1\333\17\3\30\0\2\3\1\0\6\3\1\334\20\3"+
    "\30\0\2\3\1\0\6\3\1\335\20\3\30\0\2\3"+
    "\1\0\14\3\1\336\12\3\30\0\2\3\1\0\14\3"+
    "\1\337\12\3\30\0\2\3\1\0\21\3\1\340\5\3"+
    "\30\0\2\3\1\0\6\3\1\341\20\3\30\0\2\3"+
    "\1\0\14\3\1\342\12\3\30\0\2\3\1\0\13\3"+
    "\1\343\13\3\30\0\2\3\1\0\6\3\1\344\20\3"+
    "\30\0\2\3\1\0\12\3\1\345\14\3\30\0\2\3"+
    "\1\0\11\3\1\346\15\3\30\0\2\3\1\0\6\3"+
    "\1\347\20\3\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\22\1\1\11\2\1\6\11"+
    "\2\1\10\11\1\1\1\11\33\1\1\0\4\11\36\1"+
    "\1\0\40\1\1\11\133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { return new Symbol(sym.Flotante, yychar, yyline, yytext());
          }
        case 66: break;
        case 5: 
          { return new Symbol(sym.O, yychar, yyline, yytext());
          }
        case 67: break;
        case 40: 
          { return new Symbol(sym.Nuevo, yychar, yyline, yytext());
          }
        case 68: break;
        case 47: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 69: break;
        case 16: 
          { return new Symbol(sym.Punto_coma, yychar, yyline, yytext());
          }
        case 70: break;
        case 57: 
          { return new Symbol(sym.Estatico, yychar, yyline, yytext());
          }
        case 71: break;
        case 30: 
          { return new Symbol(sym.Menor_igual, yychar, yyline, yytext());
          }
        case 72: break;
        case 38: 
          { return new Symbol(sym.Vacio, yychar, yyline, yytext());
          }
        case 73: break;
        case 63: 
          { return new Symbol(sym.Verdadero, yychar, yyline, yytext());
          }
        case 74: break;
        case 54: 
          { return new Symbol(sym.Metodo_imprimir, yychar, yyline, yytext());
          }
        case 75: break;
        case 7: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 76: break;
        case 62: 
          { return new Symbol(sym.Interface, yychar, yyline, yytext());
          }
        case 77: break;
        case 45: 
          { return new Symbol(sym.Opcion, yychar, yyline, yytext());
          }
        case 78: break;
        case 31: 
          { return new Symbol(sym.Mayor_igual, yychar, yyline, yytext());
          }
        case 79: break;
        case 58: 
          { return new Symbol(sym.Extiende, yychar, yyline, yytext());
          }
        case 80: break;
        case 28: 
          { return new Symbol(sym.Si, yychar, yyline, yytext());
          }
        case 81: break;
        case 27: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 82: break;
        case 43: 
          { return new Symbol(sym.Hacer, yychar, yyline, yytext());
          }
        case 83: break;
        case 33: 
          { return new Symbol(sym.Caso, yychar, yyline, yytext());
          }
        case 84: break;
        case 12: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 85: break;
        case 51: 
          { return new Symbol(sym.Booleano, yychar, yyline, yytext());
          }
        case 86: break;
        case 64: 
          { return new Symbol(sym.Implementa, yychar, yyline, yytext());
          }
        case 87: break;
        case 26: 
          { return new Symbol(sym.Comilla_simple, yychar, yyline, yytext());
          }
        case 88: break;
        case 44: 
          { return new Symbol(sym.Hasta, yychar, yyline, yytext());
          }
        case 89: break;
        case 18: 
          { return new Symbol(sym.Mayor, yychar, yyline, yytext());
          }
        case 90: break;
        case 34: 
          { return new Symbol(sym.Nulo, yychar, yyline, yytext());
          }
        case 91: break;
        case 15: 
          { return new Symbol(sym.Modulo, yychar, yyline, yytext());
          }
        case 92: break;
        case 17: 
          { return new Symbol(sym.Menor, yychar, yyline, yytext());
          }
        case 93: break;
        case 60: 
          { return new Symbol(sym.Mientras, yychar, yyline, yytext());
          }
        case 94: break;
        case 42: 
          { return new Symbol(sym.Falso, yychar, yyline, yytext());
          }
        case 95: break;
        case 61: 
          { return new Symbol(sym.Protegido, yychar, yyline, yytext());
          }
        case 96: break;
        case 46: 
          { return new Symbol(sym.Entero, yychar, yyline, yytext());
          }
        case 97: break;
        case 25: 
          { return new Symbol(sym.Dos_puntos, yychar, yyline, yytext());
          }
        case 98: break;
        case 50: 
          { return new Symbol(sym.Retorno, yychar, yyline, yytext());
          }
        case 99: break;
        case 8: 
          { return new Symbol(sym.Parentesis_der, yychar, yyline, yytext());
          }
        case 100: break;
        case 36: 
          { return new Symbol(sym.Clase, yychar, yyline, yytext());
          }
        case 101: break;
        case 37: 
          { return new Symbol(sym.Rompe, yychar, yyline, yytext());
          }
        case 102: break;
        case 14: 
          { return new Symbol(sym.Potencia, yychar, yyline, yytext());
          }
        case 103: break;
        case 22: 
          { return new Symbol(sym.Corchete_der, yychar, yyline, yytext());
          }
        case 104: break;
        case 13: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 105: break;
        case 56: 
          { return new Symbol(sym.Caracter, yychar, yyline, yytext());
          }
        case 106: break;
        case 11: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 107: break;
        case 9: 
          { return new Symbol(sym.Parentesis_izq, yychar, yyline, yytext());
          }
        case 108: break;
        case 49: 
          { return new Symbol(sym.Privado, yychar, yyline, yytext());
          }
        case 109: break;
        case 6: 
          { return new Symbol(sym.Y, yychar, yyline, yytext());
          }
        case 110: break;
        case 20: 
          { return new Symbol(sym.Llave_der, yychar, yyline, yytext());
          }
        case 111: break;
        case 32: 
          { return new Symbol(sym.Diferente, yychar, yyline, yytext());
          }
        case 112: break;
        case 21: 
          { return new Symbol(sym.Corchete_izq, yychar, yyline, yytext());
          }
        case 113: break;
        case 52: 
          { return new Symbol(sym.Intentar, yychar, yyline, yytext());
          }
        case 114: break;
        case 39: 
          { return new Symbol(sym.Doble, yychar, yyline, yytext());
          }
        case 115: break;
        case 1: 
          { return new Symbol(sym.Error, yychar, yyline, yytext());
          }
        case 116: break;
        case 65: 
          { return new Symbol(sym.De_otro_modo, yychar, yyline, yytext());
          }
        case 117: break;
        case 3: 
          { return new Symbol(sym.Valor_numerico, yychar, yyline, yytext());
          }
        case 118: break;
        case 24: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 119: break;
        case 41: 
          { return new Symbol(sym.Final_2, yychar, yyline, yytext());
          }
        case 120: break;
        case 4: 
          { /*Ignore*/
          }
        case 121: break;
        case 29: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 122: break;
        case 23: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 123: break;
        case 48: 
          { return new Symbol(sym.Publico, yychar, yyline, yytext());
          }
        case 124: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 125: break;
        case 19: 
          { return new Symbol(sym.Llave_izq, yychar, yyline, yytext());
          }
        case 126: break;
        case 10: 
          { return new Symbol(sym.Asignar, yychar, yyline, yytext());
          }
        case 127: break;
        case 53: 
          { return new Symbol(sym.Importar, yychar, yyline, yytext());
          }
        case 128: break;
        case 55: 
          { return new Symbol(sym.Capturar, yychar, yyline, yytext());
          }
        case 129: break;
        case 35: 
          { return new Symbol(sym.Sino, yychar, yyline, yytext());
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
